git reset HEAD~1 --soft    #undo last commit if last commit is not push
npm init -y

npm i --save-dev typescript ts-node nodemon

npx tsc --init

npm install --save express
npm install -save-dev @types/express

*Set Up Environment-Specific Configurations:*

npm install config

Create a config directory:
default.json: Base configuration that applies to all environments.
development.json: Configuration for the development environment.
staging.json: Configuration for the staging environment.
production.json: Configuration for the production environment.
test.json: Configuration for the test environment.

asign them in package.json accordingly.
"scripts": {
    "start": "SET NODE_ENV=production&& set NODE_CONFIG_DIR=src/config&& nodemon dist/index.js",
    "start:dev": "set NODE_ENV=development&& set NODE_CONFIG_DIR=src/config&& nodemon src/index.ts",
    "start:staging": "SET NODE_ENV=staging&& set NODE_CONFIG_DIR=src/config&& nodemon dist/index.js",
    "build": "tsc",
    "test": "echo \"Error: no test specified\" && exit 1"
}

declare the global type in index.d.ts in specific folder(src/@types/config)
assign that config type in tsconfig.json accordingly.

{
  "compilerOptions": {
    "baseUrl": "./",
    "paths": {
      "config": [
        "./src/@types/config"
      ],
      "@project_types": [
        "./src/@types/project_types"
      ]
    }
  }
}

in tsc config change the values according to the node version
https://github.com/tsconfig/bases?tab=readme-ov-file#centralized-recommendations-for-tsconfig-bases

*Set formatter in project*

setup eslint:
1. npm init @eslint/config@latest
answer thw q.
√ How would you like to use ESLint? · problems
√ What type of modules does your project use? · esm
√ Which framework does your project use? · none
√ Does your project use TypeScript? · typescript
√ Where does your code run? · node
The config that you've selected requires the following dependencies:

eslint, globals, @eslint/js, typescript-eslint
√ Would you like to install them now? · No / Yes
√ Which package manager do you want to use? · npm

Successfully created C:\Projects\node-ts-template\eslint.config.mjs file.
inside that file config the rules

then run the command as follows
npx eslint . --ignore-pattern "dist/*"
above command is to show the errors to fix them follow below command:
npx eslint . --ignore-pattern "dist/*" --fix

## setup prettier
npm run prettier
set the file with config as 
.prettierrc.json
ignore build with .prettierignore

command to run the formatter:
npx prettier --write .